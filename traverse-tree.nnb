{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# C#\r\n\r\n## Traditional TreeNode class"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "class TreeNode {\r\n  public constructor(val: number = null) {\r\n    this.val = val;\r\n  }\r\n  public val: number;\r\n  public left: TreeNode;\r\n  public right: TreeNode;\r\n\r\n  insert(newData: any) {\r\n    let node = this;\r\n    if (!node.val) {\r\n      node.val = newData;\r\n    } else if (node.left && newData < node.val) {\r\n      node.left.insert(newData);\r\n    } else if (newData < node.val && !node.left) {\r\n      const newNode = new TreeNode(newData);\r\n      node.left = newNode;\r\n    } else if (node.right && newData > node.val) {\r\n      node.right.insert(newData);\r\n    } else if (newData > node.val && !node.right) {\r\n      const newNode = new TreeNode(newData);\r\n      node.right = newNode;\r\n    }\r\n  }\r\n}\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# An example of a binary tree"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "let nodeValues = [12, 7, 3, 10, 14, 13, 19, 2, 4, 9, 11];\r\n//       12\r\n//    7       14\r\n//  3   10  13   19\r\n//                \r\n\r\nlet tree = new TreeNode();\r\nfor (let nodeValue of nodeValues) {\r\n  tree.insert(nodeValue);\r\n}\r\n\r\nconsole.log(JSON.stringify(tree));\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{\"val\":12,\"left\":{\"val\":7,\"left\":{\"val\":3},\"right\":{\"val\":10}},\"right\":{\"val\":14,\"left\":{\"val\":13},\"right\":{\"val\":19}}}",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "\"1, 2, 4, 3, 5, 6, 7\"\r\nnodeValues = [1, 2, 4, 3, 5, 6, 7];\r\n//       1\r\n//           2\r\n//              4\r\n//           3     5\r\n//                    6\r\n//                       7\r\n\r\n\r\ntree = new TreeNode();\r\nfor (let nodeValue of nodeValues) {\r\n  tree.insert(nodeValue);\r\n}\r\n\r\nconsole.log(JSON.stringify(tree));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{\"val\":1,\"right\":{\"val\":2,\"right\":{\"val\":4,\"left\":{\"val\":3},\"right\":{\"val\":5,\"right\":{\"val\":6,\"right\":{\"val\":7}}}}}}",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Travesing an array using Inorder Traversal (Iterative)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function traverse(root) {\r\n  const res = [];\r\n  let stack = [];\r\n  let curr = root;\r\n  while (curr != null || stack.length > 0) {\r\n    while (curr != null) {\r\n      stack.push(curr);\r\n      curr = curr.left;\r\n    }\r\n    curr = stack.pop();\r\n    res.push(curr.val);\r\n    curr = curr.right;\r\n  }\r\n  return res;\r\n}\r\nlet inOrder = traverse(tree);\r\nconsole.log(inOrder);\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  1, 2, 3, 4,",
                                "  5, 6, 7",
                                "]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Traversing a tree (My own way)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const stack = [];\r\nstack.push(tree);\r\nlet root;\r\n\r\nvar result = \"\";\r\nwhile (stack.length > 0) {\r\n  root = stack.pop();\r\n  result += `root: ${root.val} \\n`;\r\n\r\n  if (root.left) {\r\n    stack.push(root.left);\r\n    result += `left: ${root.left.val} `;\r\n  }\r\n\r\n  if (root.right) {\r\n    stack.push(root.right);\r\n    result += `right: ${root.right.val} `;\r\n  }\r\n\r\n  result += \"\\n\";\r\n}\r\nconsole.log(result);\r\n// console.log(JSON.stringify(tree));\r\n\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "root: 1 ",
                                "right: 2 ",
                                "root: 2 ",
                                "right: 4 ",
                                "root: 4 ",
                                "left: 3 right: 5 ",
                                "root: 5 ",
                                "right: 6 ",
                                "root: 6 ",
                                "right: 7 ",
                                "root: 7 ",
                                "",
                                "root: 3 ",
                                "",
                                "",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}