{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "https://www.hackerrank.com/challenges/count-triplets-1/problem?h_l=interview&isFullScreen=true&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=dictionaries-hashmaps\r\n\r\nYou are given an array and you need to find number of tripets of indices  such that the elements at those indices are in geometric progression for a given common ratio  and .\r\n\r\nExample\r\n \r\n\r\nThere are  and  at indices  and . Return .\r\n\r\nFunction Description\r\n\r\nComplete the countTriplets function in the editor below.\r\n\r\ncountTriplets has the following parameter(s):\r\n\r\nint arr[n]: an array of integers\r\nint r: the common ratio\r\nReturns\r\n\r\nint: the number of triplets\r\nInput Format\r\n\r\nThe first line contains two space-separated integers  and , the size of  and the common ratio.\r\nThe next line contains  space-seperated integers ."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "\r\nconst cases = [{ arr: [1, 3, 9, 9, 27, 81], r: 3, ans: 6 }, { arr: [1, 5, 5, 25, 125], r: 5, ans: 5 }, { arr: [1, 2, 2, 4], r: 2, ans: 2 }];\r\nconst selected = 2;\r\nconst [arr, r, answer] = [cases[selected].arr, cases[selected].r, cases[selected].ans];\r\n\r\n// Complete the countTriplets function below.\r\nfunction countTriplets(arr, r) {\r\n    let [count, map1, map2] = [0, new Map(), new Map()];\r\n    arr.forEach((e) => {\r\n        // If the second map has the element, then we have a triplet\r\n        if (map2.get(e))\r\n            count += map2.get(e)\r\n\r\n        let next = e * r;\r\n\r\n        // If the first map has the element, then we calculate what the third item (e * r) of the triplet should be and add it to the second map\r\n        //  with the count of the first map.\r\n        if (map1.get(e))\r\n            map2.set(next, (map2.get(next) ?? 0) + map1.get(e))\r\n\r\n        // Add the next item of the triplet to the first map\r\n        map1.set(next, (map1.get(next) ?? 0) + 1)\r\n    })\r\n    return count\r\n}\r\n\r\nconsole.log(countTriplets(arr, r), \"Should be\", answer);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "2 Should be 2",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "The idea here is to maintain two maps, one for the second element of the triplet and one for the third element of the triplet.\r\nfor each item in the array, we calculate the second element of the triplet and add it to the map\r\nand also calculate the third element of the triplet and add it to the second map.\r\n\r\nIt is as if we are anticipating the next item of the triplet ahead of time.\r\n\r\nExample, if we are at item 1, we calculate the second element of the triplet as 1*r and add it to the map, for example if r = 2, then the second element of the triplet is 2.\r\n\r\n\r\n#### Good idea from this solution\r\nif we want to calculate how many combination of differnt items in array is, we can use the formula:\r\n[A, A, B, B, C] = 2 A + 2 B + 1 C = 4\r\nNotice that first A is not the same as second A\r\n\r\nIf there was another C in the array, it would be\r\n2 A + 2 B + 2 C = 6\r\n\r\nThis is why \r\n[3, 3, 9, 9, 27]= 4 triplets = [(3, 9, 27), (3, 9, 27), (3, 9, 27), (3, 9, 27)] = [(0, 2, 4),(0, 3, 4), (1,2,4), (1,3,4)] = 4\r\n\r\n"
            ],
            "outputs": []
        }
    ]
}