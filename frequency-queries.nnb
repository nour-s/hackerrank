{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "You are given  queries. Each query is of the form two integers described below:\r\n-  : Insert x in your data structure.\r\n-  : Delete one occurence of y from your data structure, if present.\r\n-  : Check if any integer is present whose frequency is exactly . If yes, print 1 else 0.\r\n\r\nThe queries are given in the form of a 2-D array  of size  where  contains the operation, and  contains the data element.\r\n\r\nExample\r\n\r\nThe results of each operation are:\r\n\r\nOperation   Array   Output\r\n(1,1)       [1]\r\n(2,2)       [1]\r\n(3,2)                   0\r\n(1,1)       [1,1]\r\n(1,1)       [1,1,1]\r\n(2,1)       [1,1]\r\n(3,2)                   1\r\nReturn an array with the output: .\r\n\r\nFunction Description\r\n\r\nComplete the freqQuery function in the editor below.\r\n\r\nfreqQuery has the following parameter(s):\r\n\r\nint queries[q][2]: a 2-d array of integers\r\nReturns\r\n- int[]: the results of queries of type \r\n\r\nInput Format\r\n\r\nThe first line contains of an integer , the number of queries.\r\nEach of the next  lines contains two space-separated integers,  and .\r\n\r\nConstraints\r\n\r\nAll \r\nSample Input 0\r\n\r\n8\r\n1 5\r\n1 6\r\n3 2\r\n1 10\r\n1 10\r\n1 6\r\n2 5\r\n3 2\r\nSample Output 0\r\n\r\n0\r\n1\r\nExplanation 0\r\n\r\nFor the first query of type , there is no integer whose frequency is  (). So answer is .\r\nFor the second query of type , there are two integers in  whose frequency is  (integers =  and ). So, the answer is .\r\n\r\nSample Input 1\r\n\r\n4\r\n3 4\r\n2 1003\r\n1 16\r\n3 1\r\nSample Output 1\r\n\r\n0\r\n1\r\nExplanation 1\r\n\r\nFor the first query of type , there is no integer of frequency . The answer is . For the second query of type , there is one integer,  of frequency  so the answer is .\r\n\r\nSample Input 2\r\n\r\n10\r\n1 3\r\n2 3\r\n3 2\r\n1 4\r\n1 5\r\n1 5\r\n1 4\r\n3 2\r\n2 4\r\n3 2\r\nSample Output 2\r\n\r\n0\r\n1\r\n1\r\nExplanation 2\r\n\r\nWhen the first output query is run, the array is empty. We insert two 's and two 's before the second output query,  so there are two instances of elements occurring twice. We delete a  and run the same query. Now only the instances of  satisfy the query."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// Complete the freqQuery function below.\r\nfunction freqQuery(queries) {\r\n    const items = new Map(); // [item, count]\r\n    const counter = new Map(); // [count, number of items that have this count]\r\n\r\n    const result = [];\r\n    for (let [query, value] of queries) {\r\n        const count = items.get(value) ?? 0;\r\n        switch (query) {\r\n            case 1:\r\n                // Incrememnt count of this item\r\n                items.set(value, count + 1);\r\n\r\n                count > 0 && counter.set(count, (counter.get(count) ?? 1) - 1);\r\n                counter.set(count + 1, (counter.get(count + 1) ?? 0) + 1);\r\n                break;\r\n            case 2:\r\n                if (count == 0)\r\n                    break; // The item was never added to the map\r\n                // Decrement count of this item\r\n                items.set(value, count - 1);\r\n\r\n                counter.set(count, (counter.get(count) ?? 1) - 1);\r\n                counter.set(count - 1, (counter.get(count - 1) ?? 0) + 1);\r\n                break;\r\n            case 3:\r\n                result.push(counter.get(value) ? 1 : 0);\r\n                break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n// const [queries, output] = [[[3, 4], [2, 1003], [1, 16], [3, 1]], [0, 1]];\r\n// const [queries, output] = [[[1, 3], [2, 3], [3, 2], [1, 4], [1, 5], [1, 5], [1, 4], [3, 2], [2, 4], [3, 2]], [0, 1, 1]];\r\n// const [queries, output] = [\r\n//     [[1, 5], [1, 6], [3, 2], [1, 10], [1, 10], [1, 6], [2, 5], [3, 2]],\r\n//     [0, 1]];\r\nconst [queries, output] = [\r\n    [[2, 5], [1, 5], [3, 2], [2, 5], [2, 5], [2, 5], [1, 5], [3, 1]],\r\n    [0, 1]];\r\n\r\nconsole.log(freqQuery(queries), \"should be\", output);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 0, 1 ] should be [ 0, 1 ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "The solution is to keep track of each item and its count, and also keep track of how many items share the same count.\r\nand that's to o keep the complexity O(1) when querying the frequency of an item."
            ],
            "outputs": []
        }
    ]
}