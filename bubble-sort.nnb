{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "Mark and Jane are very happy after having their first child. Their son loves toys, so Mark wants to buy some. There are a number of different toys lying in front of him, tagged with their prices. Mark has only a certain amount to spend, and he wants to maximize the number of toys he buys with this money. Given a list of toy prices and an amount to spend, determine the maximum number of gifts he can buy.\r\n\r\nNote Each toy can be purchased only once.\r\n\r\nExample\r\n\r\n\r\nThe budget is  units of currency. He can buy items that cost  for , or  for  units. The maximum is  items.\r\n\r\nFunction Description\r\n\r\nComplete the function maximumToys in the editor below.\r\n\r\nmaximumToys has the following parameter(s):\r\n\r\nint prices[n]: the toy prices\r\nint k: Mark's budget\r\nReturns\r\n\r\nint: the maximum number of toys\r\nInput Format\r\n\r\nThe first line contains two integers,  and , the number of priced toys and the amount Mark has to spend.\r\nThe next line contains  space-separated integers \r\n\r\nConstraints\r\n\r\n\r\n\r\n\r\nA toy can't be bought multiple times.\r\n\r\nSample Input\r\n\r\n7 50\r\n1 12 5 111 200 1000 10\r\nSample Output\r\n\r\n4\r\nExplanation\r\n\r\nHe can buy only  toys at most. These toys have the following prices: ."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "The following solution is not optimal; I used the same bubble sort algorithm and kept a pointer to the smallest total that fits the budget."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function maximumToys(prices, k) {\r\n    const n = prices.length;\r\n    const total = new Array(n).fill(0);\r\n    let curTotal = 0;\r\n    let cntInd = right = n - 1;\r\n\r\n    while (right > 0) {\r\n        curTotal = 0;\r\n\r\n        if (total[cntInd] > k) {\r\n            cntInd--;\r\n        }\r\n\r\n        for (var j = 0; j < right; j++) {\r\n            // Swap adjacent elements if they are in decreasing order\r\n            if (prices[j] > prices[j + 1]) {\r\n                [prices[j], prices[j + 1]] = [prices[j + 1], prices[j]];\r\n            }\r\n            curTotal += prices[j];\r\n            total[j] = curTotal;\r\n            total[j + 1] = curTotal + prices[j + 1];\r\n        }\r\n        right--;\r\n\r\n        // After the first sort, the total of all items is already in the last element\r\n        // If the budget k is already bigger than all items, we can stop\r\n        if (total[n - 1] <= k) {\r\n            return n;\r\n        }\r\n    }\r\n    return cntInd + 1;\r\n}\r\n\r\nvar prices = [5, 3, 4, 1, 2];\r\nconsole.log(maximumToys([111, 1000, 12, 5, 1, 200, 10], 50));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "4",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "It turned out this solution is more optimal than the one above."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "function maximumToys(prices, k) {\r\n    let count = 0, sum = 0;\r\n    prices.sort((a, b) => a - b)\r\n    for (let i = 0; i < prices.length; i++)\r\n    {\r\n        if (sum <= k) {\r\n            sum = sum + prices[i];\r\n            count++;\r\n        }\r\n    }\r\n    return count - 1;\r\n}"
            ],
            "outputs": []
        }
    ]
}